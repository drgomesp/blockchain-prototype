// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	message "rhizom/proto/gen/message"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	GetBlock(ctx context.Context, opts ...grpc.CallOption) (Node_GetBlockClient, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) GetBlock(ctx context.Context, opts ...grpc.CallOption) (Node_GetBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], "/service.Node/GetBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeGetBlockClient{stream}
	return x, nil
}

type Node_GetBlockClient interface {
	Send(*message.GetBlockRequest) error
	CloseAndRecv() (*message.GetBlockResponse, error)
	grpc.ClientStream
}

type nodeGetBlockClient struct {
	grpc.ClientStream
}

func (x *nodeGetBlockClient) Send(m *message.GetBlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeGetBlockClient) CloseAndRecv() (*message.GetBlockResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(message.GetBlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	GetBlock(Node_GetBlockServer) error
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) GetBlock(Node_GetBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).GetBlock(&nodeGetBlockServer{stream})
}

type Node_GetBlockServer interface {
	SendAndClose(*message.GetBlockResponse) error
	Recv() (*message.GetBlockRequest, error)
	grpc.ServerStream
}

type nodeGetBlockServer struct {
	grpc.ServerStream
}

func (x *nodeGetBlockServer) SendAndClose(m *message.GetBlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeGetBlockServer) Recv() (*message.GetBlockRequest, error) {
	m := new(message.GetBlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Node",
	HandlerType: (*NodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlock",
			Handler:       _Node_GetBlock_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
